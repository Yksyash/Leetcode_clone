[
  {
    "title": "Add Two Numbers",
    "difficulty": "easy",
    "acceptance": "70%",
    "description": "Write a function that takes two numbers as parameters and returns their sum.",
    "testcases": ["2, 3\n5"," 5, -2\n3"],
    "functions": {
      "javascript": "function addTwoNumbers(num1, num2) {\n  // Your code here\n}",
      "python": "def add_two_numbers(num1, num2):\n    # Your code here",
      "java": "public class Solution {\n  public int addTwoNumbers(int num1, int num2) {\n    // Your code here\n  }\n}",
      "cpp": "class Solution {\npublic:\n  int addTwoNumbers(int num1, int num2) {\n    // Your code here\n  }\n};"
    }
  },
  {
    "title": "Two Sum",
    "difficulty": "medium",
    "acceptance": "50%",
    "description": "Given an array of integers, return indices of the two numbers such that they add up to a specific target.",
    "testcases": ["[2,7,11,15], 9\n[0,1]"," [3,2,4], 6\n[1,2]"],
    "functions": {
      "javascript": "function twoSum(nums, target) {\n  // Your code here\n}",
      "python": "def two_sum(nums, target):\n    # Your code here",
      "java": "public class Solution {\n  public int[] twoSum(int[] nums, int target) {\n    // Your code here\n  }\n}",
      "cpp": "class Solution {\npublic:\n  vector<int> twoSum(vector<int>& nums, int target) {\n    // Your code here\n  }\n};"
    }
  },
  {
    "title": "Reverse String",
    "difficulty": "easy",
    "acceptance": "65%",
    "description": "Write a function that reverses a string. Do it in-place.",
    "testcases": ["'hello'\n'olleh'"," 'world'\n'dlrow'"],
    "functions": {
      "javascript": "function reverseString(s) {\n  // Your code here\n}",
      "python": "def reverse_string(s):\n    # Your code here",
      "java": "public class Solution {\n  public void reverseString(char[] s) {\n    // Your code here\n  }\n}",
      "cpp": "class Solution {\npublic:\n  void reverseString(vector<char>& s) {\n    // Your code here\n  }\n};"
    }
  },
  {
    "title": "Palindrome Check",
    "difficulty": "easy",
    "acceptance": "42%",
    "description": "Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.",
    "testcases": ["'A man, a plan, a canal, Panama'\ntrue"," 'race a car'\nfalse"],
    "functions": {
      "javascript": "function isPalindrome(s) {\n  // Your code here\n}",
      "python": "def is_palindrome(s):\n    # Your code here",
      "java": "public class Solution {\n  public boolean isPalindrome(String s) {\n    // Your code here\n  }\n}",
      "cpp": "class Solution {\npublic:\n  bool isPalindrome(string s) {\n    // Your code here\n  }\n};"
    }
  },
  {
    "title": "Maximum Subarray Sum",
    "difficulty": "medium",
    "acceptance": "53%",
    "description": "Find the contiguous subarray with the largest sum.",
    "testcases": ["[-2,1,-3,4,-1,2,1,-5,4]\n6"," [1]\n1"],
    "functions": {
      "javascript": "function maxSubArray(nums) {\n  // Your code here\n}",
      "python": "def max_sub_array(nums):\n    # Your code here",
      "java": "public class Solution {\n  public int maxSubArray(int[] nums) {\n    // Your code here\n  }\n}",
      "cpp": "class Solution {\npublic:\n  int maxSubArray(vector<int>& nums) {\n    // Your code here\n  }\n};"
    }
  },
  {
    "title": "Factorial",
    "difficulty": "easy",
    "acceptance": "68%",
    "description": "Write a function to calculate the factorial of a non-negative integer.",
    "testcases": ["5\n120"," 0\n1"],
    "functions": {
      "javascript": "function factorial(n) {\n  // Your code here\n}",
      "python": "def factorial(n):\n    # Your code here",
      "java": "public class Solution {\n  public int factorial(int n) {\n    // Your code here\n  }\n}",
      "cpp": "class Solution {\npublic:\n  int factorial(int n) {\n    // Your code here\n  }\n};"
    }
  },
  {
    "title": "Merge Sorted Arrays",
    "difficulty": "easy",
    "acceptance": "36%",
    "description": "Merge two sorted arrays into a single sorted array.",
    "testcases": ["[1,2,3,0,0,0], 3, [2,5,6], 3\n[1,2,2,3,5,6]"," [1], 1, [], 0\n[1]"],
    "functions": {
      "javascript": "function mergeSortedArrays(nums1, m, nums2, n) {\n  // Your code here\n}",
      "python": "def merge_sorted_arrays(nums1, m, nums2, n):\n    # Your code here",
      "java": "public class Solution {\n  public void merge(int[] nums1, int m, int[] nums2, int n) {\n    // Your code here\n  }\n}",
      "cpp": "class Solution {\npublic:\n  void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {\n    // Your code here\n  }\n};"
    }
  },
  {
    "title": "Fibonacci Sequence",
    "difficulty": "easy",
    "acceptance": "65%",
    "description": "Write a function to generate the nth Fibonacci number.",
    "testcases": ["6\n8"," 10\n55"],
    "functions": {
      "javascript": "function fibonacci(n) {\n  // Your code here\n}",
      "python": "def fibonacci(n):\n    # Your code here",
      "java": "public class Solution {\n  public int fibonacci(int n) {\n    // Your code here\n  }\n}",
      "cpp": "class Solution {\npublic:\n  int fibonacci(int n) {\n    // Your code here\n  }\n};"
    }
  },
  {
    "title": "Longest Common Prefix",
    "difficulty": "easy",
    "acceptance": "39%",
    "description": "Write a function to find the longest common prefix string amongst an array of strings.",
    "testcases": ["['flower', 'flow', 'flight']\n'fl'"," ['dog', 'racecar', 'car']\n''"],
    "functions": {
      "javascript": "function longestCommonPrefix(strs) {\n  // Your code here\n}",
      "python": "def longest_common_prefix(strs):\n    # Your code here",
      "java": "public class Solution {\n  public String longestCommonPrefix(String[] strs) {\n    // Your code here\n  }\n}",
      "cpp": "class Solution {\npublic:\n  string longestCommonPrefix(vector<string>& strs) {\n    // Your code here\n  }\n};"
    }
  },
  {
    "title": "Reverse Integer",
    "difficulty": "easy",
    "acceptance": "26%",
    "description": "Given a 32-bit signed integer, reverse its digits.",
    "testcases": ["123\n321"," -123\n-321"],
    "functions": {
      "javascript": "function reverseInteger(x) {\n  // Your code here\n}",
      "python": "def reverse_integer(x):\n    # Your code here",
      "java": "public class Solution {\n  public int reverse(int x) {\n    // Your code here\n  }\n}",
      "cpp": "class Solution {\npublic:\n  int reverse(int x) {\n    // Your code here\n  }\n};"
    }
  },
  {
    "title": "Valid Parentheses",
    "difficulty": "easy",
    "acceptance": "40%",
    "description": "Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.",
    "testcases": ["'()',\ntrue"," '()[]{}',\ntrue"],
    "functions": {
      "javascript": "function isValid(s) {\n  // Your code here\n}",
      "python": "def is_valid(s):\n    # Your code here",
      "java": "public class Solution {\n  public boolean isValid(String s) {\n    // Your code here\n  }\n}",
      "cpp": "class Solution {\npublic:\n  bool isValid(string s) {\n    // Your code here\n  }\n};"
    }
  },
  {
    "title": "Container With Most Water",
    "difficulty": "medium",
    "acceptance": "50%",
    "description": "Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai), n vertical lines are drawn such that the two endpoints of the line i is at (i, ai) and (i, 0). Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.",
    "testcases": ["[1,8,6,2,5,4,8,3,7],\n49"," [1,1],\n1"],
    "functions": {
      "javascript": "function maxArea(height) {\n  // Your code here\n}",
      "python": "def max_area(height):\n    # Your code here",
      "java": "public class Solution {\n  public int maxArea(int[] height) {\n    // Your code here\n  }\n}",
      "cpp": "class Solution {\npublic:\n  int maxArea(vector<int>& height) {\n    // Your code here\n  }\n};"
    }
  },
  {
    "title": "Power of Two",
    "difficulty": "easy",
    "acceptance": "43%",
    "description": "Given an integer n, return true if it is a power of two. Otherwise, return false.",
    "testcases": ["1,\ntrue"," 16,\ntrue"],
    "functions": {
      "javascript": "function isPowerOfTwo(n) {\n  // Your code here\n}",
      "python": "def is_power_of_two(n):\n    # Your code here",
      "java": "public class Solution {\n  public boolean isPowerOfTwo(int n) {\n    // Your code here\n  }\n}",
      "cpp": "class Solution {\npublic:\n  bool isPowerOfTwo(int n) {\n    // Your code here\n  }\n};"
    }
  },
  {
    "title": "Roman to Integer",
    "difficulty": "easy",
    "acceptance": "45%",
    "description": "Convert a Roman numeral to an integer.",
    "testcases": ["'III',\n3"," 'IX',\n9"],
    "functions": {
      "javascript": "function romanToInt(s) {\n  // Your code here\n}",
      "python": "def roman_to_int(s):\n    # Your code here",
      "java": "public class Solution {\n  public int romanToInt(String s) {\n    // Your code here\n  }\n}",
      "cpp": "class Solution {\npublic:\n  int romanToInt(string s) {\n    // Your code here\n  }\n};"
    }
  },
  {
    "title": "Median of Two Sorted Arrays",
    "difficulty": "hard",
    "acceptance": "33%",
    "description": "There are two sorted arrays nums1 and nums2 of size m and n respectively. Find the median of the two sorted arrays.",
    "testcases": ["[1,3], [2]\n2.0"," [1,2], [3,4]\n2.5"],
    "functions": {
      "javascript": "function findMedianSortedArrays(nums1, nums2) {\n  // Your code here\n}",
      "python": "def find_median_sorted_arrays(nums1, nums2):\n    # Your code here",
      "java": "public class Solution {\n  public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n    // Your code here\n  }\n}",
      "cpp": "class Solution {\npublic:\n  double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\n    // Your code here\n  }\n};"
    }
  },
  {
    "title": "Valid Palindrome II",
    "difficulty": "easy",
    "acceptance": "41%",
    "description": "Given a non-empty string s, you may delete at most one character. Judge whether you can make it a palindrome.",
    "testcases": ["'aba',\ntrue"," 'abca',\ntrue"],
    "functions": {
      "javascript": "function validPalindrome(s) {\n  // Your code here\n}",
      "python": "def valid_palindrome(s):\n    # Your code here",
      "java": "public class Solution {\n  public boolean validPalindrome(String s) {\n    // Your code here\n  }\n}",
      "cpp": "class Solution {\npublic:\n  bool validPalindrome(string s) {\n    // Your code here\n  }\n};"
    }
  },
  {
    "title": "Longest Substring Without Repeating Characters",
    "difficulty": "medium",
    "acceptance": "32%",
    "description": "Given a string, find the length of the longest substring without repeating characters.",
    "testcases": ["'abcabcbb',\n3"," 'bbbbb',\n1"],
    "functions": {
      "javascript": "function lengthOfLongestSubstring(s) {\n  // Your code here\n}",
      "python": "def length_of_longest_substring(s):\n    # Your code here",
      "java": "public class Solution {\n  public int lengthOfLongestSubstring(String s) {\n    // Your code here\n  }\n}",
      "cpp": "class Solution {\npublic:\n  int lengthOfLongestSubstring(string s) {\n    // Your code here\n  }\n};"
    }
  },
  {
    "title": "Implement Trie (Prefix Tree)",
    "difficulty": "medium",
    "acceptance": "46%",
    "description": "Implement a trie with insert, search, and startsWith methods.",
    "testcases": ["'insert', 'search', 'startsWith'\nnull, false, true"],
    "functions": {
      "javascript": "class Trie {\n  // Your code here\n}\n\nconst trie = new Trie();\ntrie.insert('apple');\nconsole.log(trie.search('apple'));\nconsole.log(trie.search('app'));\nconsole.log(trie.startsWith('app'));",
      "python": "class Trie:\n    # Your code here\n\ntrie = Trie()\ntrie.insert('apple')\nprint(trie.search('apple'))\nprint(trie.search('app'))\nprint(trie.startsWith('app'))",
      "java": "class Trie {\n  // Your code here\n}\n\nTrie trie = new Trie();\ntrie.insert('apple');\nSystem.out.println(trie.search('apple'));\nSystem.out.println(trie.search('app'));\nSystem.out.println(trie.startsWith('app'));",
      "cpp": "class Trie {\n  // Your code here\n};\n\nTrie trie;\ntrie.insert('apple');\ncout << trie.search('apple') << endl;\ncout << trie.search('app') << endl;\ncout << trie.startsWith('app') << endl;"
    }
  },
  {
    "title": "Palindrome Linked List",
    "difficulty": "easy",
    "acceptance": "42%",
    "description": "Given a singly linked list, determine if it is a palindrome.",
    "testcases": ["[1,2,2,1],\ntrue"," [1,2],\nfalse"],
    "functions": {
      "javascript": "function isPalindrome(head) {\n  // Your code here\n}",
      "python": "def is_palindrome(head):\n    # Your code here",
      "java": "public class Solution {\n  public boolean isPalindrome(ListNode head) {\n    // Your code here\n  }\n}",
      "cpp": "class Solution {\npublic:\n  bool isPalindrome(ListNode* head) {\n    // Your code here\n  }\n};"
    }
  },
  {
    "title": "Merge k Sorted Lists",
    "difficulty": "hard",
    "acceptance": "39%",
    "description": "Merge k sorted linked lists and return it as one sorted list.",
    "testcases": ["[[1,4,5],[1,3,4],[2,6]]\n[1,1,2,3,4,4,5,6]"," [[]]\n[]"],
    "functions": {
      "javascript": "function mergeKLists(lists) {\n  // Your code here\n}",
      "python": "def merge_k_lists(lists):\n    # Your code here",
      "java": "public class Solution {\n  public ListNode mergeKLists(ListNode[] lists) {\n    // Your code here\n  }\n}",
      "cpp": "class Solution {\npublic:\n  ListNode* mergeKLists(vector<ListNode*>& lists) {\n    // Your code here\n  }\n};"
    }
  },
  {
    "title": "ZigZag Conversion",
    "difficulty": "medium",
    "acceptance": "39%",
    "description": "Convert the string s into a zigzag pattern and then read it line by line.",
    "testcases": ["'PAYPALISHIRING', 3\n'PAHNAPLSIIGYIR'"," 'PAYPALISHIRING', 4\n'PINALSIGYAHRPI'"],
    "functions": {
      "javascript": "function convert(s, numRows) {\n  // Your code here\n}",
      "python": "def convert(s, numRows):\n    # Your code here",
      "java": "public class Solution {\n  public String convert(String s, int numRows) {\n    // Your code here\n  }\n}",
      "cpp": "class Solution {\npublic:\n  string convert(string s, int numRows) {\n    // Your code here\n  }\n};"
    }
  },
  {
    "title": "Group Anagrams",
    "difficulty": "medium",
    "acceptance": "59%",
    "description": "Given an array of strings, group anagrams together.",
    "testcases": ["['eat', 'tea', 'tan', 'ate', 'nat', 'bat']\n[['eat','tea','ate'],['tan','nat'],['bat']]"],
    "functions": {
      "javascript": "function groupAnagrams(strs) {\n  // Your code here\n}",
      "python": "def group_anagrams(strs):\n    # Your code here",
      "java": "public class Solution {\n  public List<List<String>> groupAnagrams(String[] strs) {\n    // Your code here\n  }\n}",
      "cpp": "class Solution {\npublic:\n  vector<vector<string>> groupAnagrams(vector<string>& strs) {\n    // Your code here\n  }\n};"
    }
  },
  {
    "title": "Search in Rotated Sorted Array",
    "difficulty": "medium",
    "acceptance": "36%",
    "description": "Search for a target value in a rotated sorted array.",
    "testcases": ["[4,5,6,7,0,1,2], 0\n4"," [4,5,6,7,0,1,2], 3\n-1"],
    "functions": {
      "javascript": "function search(nums, target) {\n  // Your code here\n}",
      "python": "def search(nums, target):\n    # Your code here",
      "java": "public class Solution {\n  public int search(int[] nums, int target) {\n    // Your code here\n  }\n}",
      "cpp": "class Solution {\npublic:\n  int search(vector<int>& nums, int target) {\n    // Your code here\n  }\n};"
    }
  }
]

