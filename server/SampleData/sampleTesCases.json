[
    {
        "title": "Add Two Numbers",
        "testcases": {
            "javascript": "const testResults = [{\"expectedOutput\":5,\"actualOutput\":0},{\"expectedOutput\":3,\"actualOutput\":0}];\n\ntestResults[0].actualOutput = addTwoNumbers(2, 3);\n\ntestResults[1].actualOutput = addTwoNumbers(5, -2);\n\nconsole.log(testResults);",
            "python": "test_results = [\n    {\"expected_output\": 5, \"actual_output\": 0},\n    {\"expected_output\": 3, \"actual_output\": 0}\n]\n\ntest_results[0][\"actual_output\"] = add_two_numbers(2, 3)\n\ntest_results[1][\"actual_output\"] = add_two_numbers(5, -2)\n\nprint(test_results)",
            "cpp": "int main() {\n    Solution sol;\n    std::pair<int, int> testResults[2] = {\n        {5, 0},\n        {3, 0}\n    };\n\n    testResults[0].second = sol.addTwoNumbers(2, 3);\n    testResults[1].second = sol.addTwoNumbers(5, -2);\n\n    for (const auto& result : testResults) {\n        std::cout << \"Expected: \" << result.first << \", Actual: \" << result.second << std::endl;\n    }\n\n    return 0;\n}",
            "java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class TestResults extends Solution {\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        List<int[]> testResults = new ArrayList<>();\n        testResults.add(new int[]{5, 0});\n        testResults.add(new int[]{3, 0});\n\n        testResults.get(0)[1] = sol.addTwoNumbers(2, 3);\n        testResults.get(1)[1] = sol.addTwoNumbers(5, -2);\n\n        for (int[] result : testResults) {\n            System.out.println(\"Expected: \" + result[0] + \", Actual: \" + result[1]);\n            System.out.flush();\n        }\n    }\n}"
        }
    },
    {
        "title": "Two Sum",
        "testcases": {
            "javascript": "const testResults = [{\"expectedOutput\":[0,1],\"actualOutput\":[]},{\"expectedOutput\":[1,2],\"actualOutput\":[]}];\n\ntestResults[0].actualOutput = twoSum([2,7,11,15], 9);\n\ntestResults[1].actualOutput = twoSum([3,2,4], 6);\n\nconsole.log(testResults);",
            "python": "test_results = [\n    {\"expected_output\": [0, 1], \"actual_output\": []},\n    {\"expected_output\": [1, 2], \"actual_output\": []}\n]\n\ntest_results[0][\"actual_output\"] = two_sum([2, 7, 11, 15], 9)\n\ntest_results[1][\"actual_output\"] = two_sum([3, 2, 4], 6)\n\nprint(test_results)",
            "cpp": "int main() {\n    Solution sol;\n    std::pair<std::vector<int>, std::vector<int>> testResults[2] = {\n        {{0, 1}, {}},\n        {{1, 2}, {}}\n    };\n\n    testResults[0].second = sol.twoSum({2, 7, 11, 15}, 9);\n    testResults[1].second = sol.twoSum({3, 2, 4}, 6);\n\n    for (const auto& result : testResults) {\n        std::cout << \"Expected: [\" << result.first[0] << \", \" << result.first[1] << \"], Actual: [\";\n        for (const auto& num : result.second) {\n            std::cout << num << \", \";\n        }\n        std::cout << \"]\" << std::endl;\n    }\n\n    return 0;\n}",
            "java": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class TestResults extends Solution {\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        List<int[]> testResults = new ArrayList<>();\n        testResults.add(new int[]{0, 1});\n        testResults.add(new int[]{1, 2});\n\n        testResults.get(0)[1] = Arrays.equals(sol.twoSum(new int[]{2, 7, 11, 15}, 9), new int[]{0, 1}) ? 1 : 0;\n        testResults.get(1)[1] = Arrays.equals(sol.twoSum(new int[]{3, 2, 4}, 6), new int[]{1, 2}) ? 1 : 0;\n\n        for (int[] result : testResults) {\n            System.out.println(\"Expected: [\" + result[0] + \", \" + result[1] + \"], Actual: [\" + Arrays.toString(sol.twoSum(new int[]{2, 7, 11, 15}, 9)) + \"]\");\n            System.out.flush();\n        }\n    }\n}"
        }
    },
    {
        "title": "Reverse String",
        "testcases": {
            "javascript": "const testResults = [{\"expectedOutput\":\"olleh\",\"actualOutput\":\"\"},{\"expectedOutput\":\"dlrow\",\"actualOutput\":\"\"}];\n\ntestResults[0].actualOutput = reverseString('hello');\n\ntestResults[1].actualOutput = reverseString('world');\n\nconsole.log(testResults);",
            "python": "test_results = [\n    {\"expected_output\": \"olleh\", \"actual_output\": \"\"},\n    {\"expected_output\": \"dlrow\", \"actual_output\": \"\"}\n]\n\ntest_results[0][\"actual_output\"] = reverse_string('hello')\n\ntest_results[1][\"actual_output\"] = reverse_string('world')\n\nprint(test_results)",
            "cpp": "int main() {\n    Solution sol;\n    std::pair<std::string, std::string> testResults[2] = {\n        {\"olleh\", \"\"},\n        {\"dlrow\", \"\"}\n    };\n\n    testResults[0].second = sol.reverseString(\"hello\");\n    testResults[1].second = sol.reverseString(\"world\");\n\n    for (const auto& result : testResults) {\n        std::cout << \"Expected: '\" << result.first << \"', Actual: '\" << result.second << \"'\" << std::endl;\n    }\n\n    return 0;\n}",
            "java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class TestResults extends Solution {\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        List<String[]> testResults = new ArrayList<>();\n        testResults.add(new String[]{\"olleh\", \"\"});\n        testResults.add(new String[]{\"dlrow\", \"\"});\n\n        testResults.get(0)[1] = sol.reverseString(\"hello\");\n        testResults.get(1)[1] = sol.reverseString(\"world\");\n\n        for (String[] result : testResults) {\n            System.out.println(\"Expected: '\" + result[0] + \"', Actual: '\" + result[1] + \"'\");\n            System.out.flush();\n        }\n    }\n}"
        }
    },
    {
        "title": "Palindrome Check",
        "testcases": {
            "javascript": "const testResults = [{\"expectedOutput\":true,\"actualOutput\":false},{\"expectedOutput\":false,\"actualOutput\":false}];\n\ntestResults[0].actualOutput = isPalindrome('A man, a plan, a canal, Panama');\n\ntestResults[1].actualOutput = isPalindrome('race a car');\n\nconsole.log(testResults);",
            "python": "test_results = [\n    {\"expected_output\": True, \"actual_output\": False},\n    {\"expected_output\": False, \"actual_output\": False}\n]\n\ntest_results[0][\"actual_output\"] = is_palindrome('A man, a plan, a canal, Panama')\n\ntest_results[1][\"actual_output\"] = is_palindrome('race a car')\n\nprint(test_results)",
            "cpp": "int main() {\n    Solution sol;\n    std::pair<bool, bool> testResults[2] = {\n        {true, false},\n        {false, false}\n    };\n\n    testResults[0].second = sol.isPalindrome(\"A man, a plan, a canal, Panama\");\n    testResults[1].second = sol.isPalindrome(\"race a car\");\n\n    for (const auto& result : testResults) {\n        std::cout << \"Expected: \" << result.first << \", Actual: \" << result.second << std::endl;\n    }\n\n    return 0;\n}",
            "java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class TestResults extends Solution {\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        List<Boolean[]> testResults = new ArrayList<>();\n        testResults.add(new Boolean[]{true, false});\n        testResults.add(new Boolean[]{false, false});\n\n        testResults.get(0)[1] = sol.isPalindrome(\"A man, a plan, a canal, Panama\");\n        testResults.get(1)[1] = sol.isPalindrome(\"race a car\");\n\n        for (Boolean[] result : testResults) {\n            System.out.println(\"Expected: \" + result[0] + \", Actual: \" + result[1]);\n            System.out.flush();\n        }\n    }\n}"
        }
    },
    {
        "title": "Maximum Subarray Sum",
        "testcases": {
            "javascript": "const testResults = [{\"expectedOutput\":6,\"actualOutput\":0},{\"expectedOutput\":1,\"actualOutput\":0}];\n\ntestResults[0].actualOutput = maxSubArray([-2,1,-3,4,-1,2,1,-5,4]);\n\ntestResults[1].actualOutput = maxSubArray([1]);\n\nconsole.log(testResults);",
            "python": "test_results = [\n    {\"expected_output\": 6, \"actual_output\": 0},\n    {\"expected_output\": 1, \"actual_output\": 0}\n]\n\ntest_results[0][\"actual_output\"] = max_sub_array([-2,1,-3,4,-1,2,1,-5,4])\n\ntest_results[1][\"actual_output\"] = max_sub_array([1])\n\nprint(test_results)",
            "cpp": "int main() {\n    Solution sol;\n    std::pair<int, int> testResults[2] = {\n        {6, 0},\n        {1, 0}\n    };\n\n    testResults[0].second = sol.maxSubArray({-2, 1, -3, 4, -1, 2, 1, -5, 4});\n    testResults[1].second = sol.maxSubArray({1});\n\n    for (const auto& result : testResults) {\n        std::cout << \"Expected: \" << result.first << \", Actual: \" << result.second << std::endl;\n    }\n\n    return 0;\n}",
            "java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class TestResults extends Solution {\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        List<int[]> testResults = new ArrayList<>();\n        testResults.add(new int[]{6, 0});\n        testResults.add(new int[]{1, 0});\n\n        testResults.get(0)[1] = sol.maxSubArray(new int[]{-2, 1, -3, 4, -1, 2, 1, -5, 4});\n        testResults.get(1)[1] = sol.maxSubArray(new int[]{1});\n\n        for (int[] result : testResults) {\n            System.out.println(\"Expected: \" + result[0] + \", Actual: \" + result[1]);\n            System.out.flush();\n        }\n    }\n}"
        }
    },
    {
        "title": "Factorial",
        "testcases": {
            "javascript": "const testResults = [{\"expectedOutput\":120,\"actualOutput\":0},{\"expectedOutput\":1,\"actualOutput\":0}];\n\ntestResults[0].actualOutput = factorial(5);\n\ntestResults[1].actualOutput = factorial(0);\n\nconsole.log(testResults);",
            "python": "test_results = [\n    {\"expected_output\": 120, \"actual_output\": 0},\n    {\"expected_output\": 1, \"actual_output\": 0}\n]\n\ntest_results[0][\"actual_output\"] = factorial(5)\n\ntest_results[1][\"actual_output\"] = factorial(0)\n\nprint(test_results)",
            "cpp": "int main() {\n    Solution sol;\n    std::pair<int, int> testResults[2] = {\n        {120, 0},\n        {1, 0}\n    };\n\n    testResults[0].second = sol.factorial(5);\n    testResults[1].second = sol.factorial(0);\n\n    for (const auto& result : testResults) {\n        std::cout << \"Expected: \" << result.first << \", Actual: \" << result.second << std::endl;\n    }\n\n    return 0;\n}",
            "java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class TestResults extends Solution {\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        List<int[]> testResults = new ArrayList<>();\n        testResults.add(new int[]{120, 0});\n        testResults.add(new int[]{1, 0});\n\n        testResults.get(0)[1] = sol.factorial(5);\n        testResults.get(1)[1] = sol.factorial(0);\n\n        for (int[] result : testResults) {\n            System.out.println(\"Expected: \" + result[0] + \", Actual: \" + result[1]);\n            System.out.flush();\n        }\n    }\n}"
        }
    },
    {
        "title": "Merge Sorted Arrays",
        "testcases": {
            "javascript": "const testResults = [{\"expectedOutput\":[1,2,2,3,5,6],\"actualOutput\":[]},{\"expectedOutput\":[1],\"actualOutput\":[]}];\n\ntestResults[0].actualOutput = mergeSortedArrays([1,2,3,0,0,0], 3, [2,5,6], 3);\n\ntestResults[1].actualOutput = mergeSortedArrays([1], 1, [], 0);\n\nconsole.log(testResults);",
            "python": "test_results = [\n    {\"expected_output\": [1, 2, 2, 3, 5, 6], \"actual_output\": []},\n    {\"expected_output\": [1], \"actual_output\": []}\n]\n\ntest_results[0][\"actual_output\"] = merge_sorted_arrays([1, 2, 3, 0, 0, 0], 3, [2, 5, 6], 3)\n\ntest_results[1][\"actual_output\"] = merge_sorted_arrays([1], 1, [], 0)\n\nprint(test_results)",
            "cpp": "int main() {\n    Solution sol;\n    std::pair<std::vector<int>, std::vector<int>> testResults[2] = {\n        {{1, 2, 2, 3, 5, 6}, {}},\n        {{1}, {}}\n    };\n\n    testResults[0].second = sol.mergeSortedArrays({1, 2, 3, 0, 0, 0}, 3, {2, 5, 6}, 3);\n    testResults[1].second = sol.mergeSortedArrays({1}, 1, {}, 0);\n\n    for (const auto& result : testResults) {\n        std::cout << \"Expected: [\";\n        for (const auto& num : result.first) {\n            std::cout << num << \", \";\n        }\n        std::cout << \"], Actual: [\";\n        for (const auto& num : result.second) {\n            std::cout << num << \", \";\n        }\n        std::cout << \"]\" << std::endl;\n    }\n\n    return 0;\n}",
            "java": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class TestResults extends Solution {\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        List<int[]> testResults = new ArrayList<>();\n        testResults.add(new int[]{1, 2, 2, 3, 5, 6});\n        testResults.add(new int[]{1});\n\n        testResults.get(0)[1] = Arrays.equals(sol.mergeSortedArrays(new int[]{1, 2, 3, 0, 0, 0}, 3, new int[]{2, 5, 6}, 3), new int[]{1, 2, 2, 3, 5, 6}) ? 1 : 0;\n        testResults.get(1)[1] = Arrays.equals(sol.mergeSortedArrays(new int[]{1}, 1, new int[]{}, 0), new int[]{1}) ? 1 : 0;\n\n        for (int[] result : testResults) {\n            System.out.println(\"Expected: [\" + Arrays.toString(result) + \"], Actual: [\" + Arrays.toString(sol.mergeSortedArrays(new int[]{1, 2, 3, 0, 0, 0}, 3, new int[]{2, 5, 6}, 3)) + \"]\");\n            System.out.flush();\n        }\n    }\n}"
        }
    },
    {
        "title": "Fibonacci Sequence",
        "testcases": {
            "javascript": "const testResults = [{\"expectedOutput\":8,\"actualOutput\":0},{\"expectedOutput\":55,\"actualOutput\":0}];\n\ntestResults[0].actualOutput = fibonacci(6);\n\ntestResults[1].actualOutput = fibonacci(10);\n\nconsole.log(testResults);",
            "python": "test_results = [\n    {\"expected_output\": 8, \"actual_output\": 0},\n    {\"expected_output\": 55, \"actual_output\": 0}\n]\n\ntest_results[0][\"actual_output\"] = fibonacci(6)\n\ntest_results[1][\"actual_output\"] = fibonacci(10)\n\nprint(test_results)",
            "cpp": "int main() {\n    Solution sol;\n    std::pair<int, int> testResults[2] = {\n        {8, 0},\n        {55, 0}\n    };\n\n    testResults[0].second = sol.fibonacci(6);\n    testResults[1].second = sol.fibonacci(10);\n\n    for (const auto& result : testResults) {\n        std::cout << \"Expected: \" << result.first << \", Actual: \" << result.second << std::endl;\n    }\n\n    return 0;\n}",
            "java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class TestResults extends Solution {\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        List<int[]> testResults = new ArrayList<>();\n        testResults.add(new int[]{8, 0});\n        testResults.add(new int[]{55, 0});\n\n        testResults.get(0)[1] = sol.fibonacci(6);\n        testResults.get(1)[1] = sol.fibonacci(10);\n\n        for (int[] result : testResults) {\n            System.out.println(\"Expected: \" + result[0] + \", Actual: \" + result[1]);\n            System.out.flush();\n        }\n    }\n}"
        }
    },
    {
        "title": "Valid Parentheses",
        "testcases": {
            "javascript": "const testResults=[{expectedOutput: true, actualOutput: false},{expectedOutput: true, actualOutput: false},{expectedOutput: true, actualOutput: false}];\n\n  testResults[0].actualOutput = isValid('()');\n  testResults[1].actualOutput = isValid('()[]{}');\n  console.log(testResults);",
            "python": "test_results = [\n  {\"expected_output\": true, \"actual_output\": false},\n  {\"expected_output\": true, \"actual_output\": false},\n  {\"expected_output\": true, \"actual_output\": false},\n]\n\ntest_results[0][\"actual_output\"] = is_valid('()')\ntest_results[1][\"actual_output\"] = is_valid('()[]{}')\nprint(test_results)",
            "cpp": "int main() {\n  Solution sol;\n  std::pair<bool, bool> testResults[3] = {\n    {true, false},\n    {true, false},\n    {true, false}\n  };\n\n  testResults[0].second = sol.isValid(\"()\");\n  testResults[1].second = sol.isValid(\"()[]{}\");\n\n  for (const auto& result : testResults) {\n    std::cout << \"Expected: \" << result.first << \", Actual: \" << result.second << std::endl;\n  }\n\n  return 0;\n}",
            "java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class TestResults extends Solution {\n  public static void main(String[] args) {\n    Solution sol = new Solution();\n    List<boolean[]> testResults = new ArrayList<>();\n    testResults.add(new boolean[]{true, false});\n    testResults.add(new boolean[]{true, false});\n    testResults.add(new boolean[]{true, false});\n\n    testResults.get(0)[1] = sol.isValid(\"()\");\n    testResults.get(1)[1] = sol.isValid(\"()[]{}\");\n\n    for (boolean[] result : testResults) {\n      System.out.println(\"Expected: \" + result[0] + \", Actual: \" + result[1]);\n      System.out.flush();\n    }\n  }\n}"
        }
    },
    {
        "title": "Container With Most Water",
        "testcases": {
            "javascript": "const testResults=[{expectedOutput: 49, actualOutput: 0},{expectedOutput: 1, actualOutput: 0},{expectedOutput: 25, actualOutput: 0}];\n\ntestResults[0].actualOutput = maxArea([1,8,6,2,5,4,8,3,7]);\ntestResults[1].actualOutput = maxArea([1,1]);\ntestResults[2].actualOutput = maxArea([1,2,3,4,5,6,7,8,9,10]);\n\nconsole.log(testResults);",
            "python": "test_results = [\n  {\"expected_output\": 49, \"actual_output\": 0},\n  {\"expected_output\": 1, \"actual_output\": 0},\n  {\"expected_output\": 25, \"actual_output\": 0},\n]\n\ntest_results[0][\"actual_output\"] = max_area([1,8,6,2,5,4,8,3,7])\ntest_results[1][\"actual_output\"] = max_area([1,1])\ntest_results[2][\"actual_output\"] = max_area([1,2,3,4,5,6,7,8,9,10])\n\nprint(test_results)",
            "cpp": "int main() {\n  Solution sol;\n  std::pair<int, int> testResults[3] = {\n    {49, 0},\n    {1, 0},\n    {25, 0}\n  };\n\n  testResults[0].second = sol.maxArea({1,8,6,2,5,4,8,3,7});\n  testResults[1].second = sol.maxArea({1,1});\n  testResults[2].second = sol.maxArea({1,2,3,4,5,6,7,8,9,10});\n\n  for (const auto& result : testResults) {\n    std::cout << \"Expected: \" << result.first << \", Actual: \" << result.second << std::endl;\n  }\n\n  return 0;\n}",
            "java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class TestResults extends Solution {\n  public static void main(String[] args) {\n    Solution sol = new Solution();\n    List<int[]> testResults = new ArrayList<>();\n    testResults.add(new int[]{49, 0});\n    testResults.add(new int[]{1, 0});\n    testResults.add(new int[]{25, 0});\n\n    testResults.get(0)[1] = sol.maxArea(new int[]{1,8,6,2,5,4,8,3,7});\n    testResults.get(1)[1] = sol.maxArea(new int[]{1,1});\n    testResults.get(2)[1] = sol.maxArea(new int[]{1,2,3,4,5,6,7,8,9,10});\n\n    for (int[] result : testResults) {\n      System.out.println(\"Expected: \" + result[0] + \", Actual: \" + result[1]);\n      System.out.flush();\n    }\n  }\n}"
        }
    },
    {
        "title": "Power of Two",
        "testcases": {
            "javascript": "const testResults=[{expectedOutput: true, actualOutput: false},{expectedOutput: true, actualOutput: false},{expectedOutput: true, actualOutput: false}];\n\n  testResults[0].actualOutput = isPowerOfTwo(1);\n  testResults[1].actualOutput = isPowerOfTwo(16);\n  testResults[2].actualOutput = isPowerOfTwo(5);\n\n  console.log(testResults);",
            "python": "test_results = [\n  {\"expected_output\": true, \"actual_output\": false},\n  {\"expected_output\": true, \"actual_output\": false},\n  {\"expected_output\": true, \"actual_output\": false},\n]\n\ntest_results[0][\"actual_output\"] = is_power_of_two(1)\ntest_results[1][\"actual_output\"] = is_power_of_two(16)\ntest_results[2][\"actual_output\"] = is_power_of_two(5)\n\nprint(test_results)",
            "cpp": "int main() {\n  Solution sol;\n  std::pair<bool, bool> testResults[3] = {\n    {true, false},\n    {true, false},\n    {true, false}\n  };\n\n  testResults[0].second = sol.isPowerOfTwo(1);\n  testResults[1].second = sol.isPowerOfTwo(16);\n  testResults[2].second = sol.isPowerOfTwo(5);\n\n  for (const auto& result : testResults) {\n    std::cout << \"Expected: \" << result.first << \", Actual: \" << result.second << std::endl;\n  }\n\n  return 0;\n}",
            "java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class TestResults extends Solution {\n  public static void main(String[] args) {\n    Solution sol = new Solution();\n    List<boolean[]> testResults = new ArrayList<>();\n    testResults.add(new boolean[]{true, false});\n    testResults.add(new boolean[]{true, false});\n    testResults.add(new boolean[]{true, false});\n\n    testResults.get(0)[1] = sol.isPowerOfTwo(1);\n    testResults.get(1)[1] = sol.isPowerOfTwo(16);\n    testResults.get(2)[1] = sol.isPowerOfTwo(5);\n\n    for (boolean[] result : testResults) {\n      System.out.println(\"Expected: \" + result[0] + \", Actual: \" + result[1]);\n      System.out.flush();\n    }\n  }\n}"
        }
    },
    {
        "title": "Roman to Integer",
        "testcases": {
            "javascript": "const testResults=[{expectedOutput: 3, actualOutput: 0},{expectedOutput: 9, actualOutput: 0},{expectedOutput: 58, actualOutput: 0}];\n\ntestResults[0].actualOutput = romanToInt('III');\ntestResults[1].actualOutput = romanToInt('IX');\ntestResults[2].actualOutput = romanToInt('LVIII');\n\nconsole.log(testResults);",
            "python": "test_results = [\n  {\"expected_output\": 3, \"actual_output\": 0},\n  {\"expected_output\": 9, \"actual_output\": 0},\n  {\"expected_output\": 58, \"actual_output\": 0},\n]\n\ntest_results[0][\"actual_output\"] = roman_to_int('III')\ntest_results[1][\"actual_output\"] = roman_to_int('IX')\ntest_results[2][\"actual_output\"] = roman_to_int('LVIII')\n\nprint(test_results)",
            "cpp": "int main() {\n  Solution sol;\n  std::pair<int, int> testResults[3] = {\n    {3, 0},\n    {9, 0},\n    {58, 0}\n  };\n\n  testResults[0].second = sol.romanToInt(\"III\");\n  testResults[1].second = sol.romanToInt(\"IX\");\n  testResults[2].second = sol.romanToInt(\"LVIII\");\n\n  for (const auto& result : testResults) {\n    std::cout << \"Expected: \" << result.first << \", Actual: \" << result.second << std::endl;\n  }\n\n  return 0;\n}",
            "java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class TestResults extends Solution {\n  public static void main(String[] args) {\n    Solution sol = new Solution();\n    List<int[]> testResults = new ArrayList<>();\n    testResults.add(new int[]{3, 0});\n    testResults.add(new int[]{9, 0});\n    testResults.add(new int[]{58, 0});\n\n    testResults.get(0)[1] = sol.romanToInt(\"III\");\n    testResults.get(1)[1] = sol.romanToInt(\"IX\");\n    testResults.get(2)[1] = sol.romanToInt(\"LVIII\");\n\n    for (int[] result : testResults) {\n      System.out.println(\"Expected: \" + result[0] + \", Actual: \" + result[1]);\n      System.out.flush();\n    }\n  }\n}"
        }
    },
    {
        "title": "Median of Two Sorted Arrays",
        "testcases": {
            "javascript": "const testResults=[{expectedOutput: 2.0, actualOutput: 0},{expectedOutput: 2.5, actualOutput: 0},{expectedOutput: 3.5, actualOutput: 0}];\n\ntestResults[0].actualOutput = findMedianSortedArrays([1,3], [2]);\ntestResults[1].actualOutput = findMedianSortedArrays([1,2], [3,4]);\ntestResults[2].actualOutput = findMedianSortedArrays([1,3,8], [2,7]);\n\nconsole.log(testResults);",
            "python": "test_results = [\n  {\"expected_output\": 2.0, \"actual_output\": 0},\n  {\"expected_output\": 2.5, \"actual_output\": 0},\n  {\"expected_output\": 3.5, \"actual_output\": 0},\n]\n\ntest_results[0][\"actual_output\"] = find_median_sorted_arrays([1,3], [2])\ntest_results[1][\"actual_output\"] = find_median_sorted_arrays([1,2], [3,4])\ntest_results[2][\"actual_output\"] = find_median_sorted_arrays([1,3,8], [2,7])\n\nprint(test_results)",
            "cpp": "int main() {\n  Solution sol;\n  std::pair<double, double> testResults[3] = {\n    {2.0, 0},\n    {2.5, 0},\n    {3.5, 0}\n  };\n\n  testResults[0].second = sol.findMedianSortedArrays({1,3}, {2});\n  testResults[1].second = sol.findMedianSortedArrays({1,2}, {3,4});\n  testResults[2].second = sol.findMedianSortedArrays({1,3,8}, {2,7});\n\n  for (const auto& result : testResults) {\n    std::cout << \"Expected: \" << result.first << \", Actual: \" << result.second << std::endl;\n  }\n\n  return 0;\n}",
            "java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class TestResults extends Solution {\n  public static void main(String[] args) {\n    Solution sol = new Solution();\n    List<double[]> testResults = new ArrayList<>();\n    testResults.add(new double[]{2.0, 0});\n    testResults.add(new double[]{2.5, 0});\n    testResults.add(new double[]{3.5, 0});\n\n    testResults.get(0)[1] = sol.findMedianSortedArrays(new int[]{1,3}, new int[]{2});\n    testResults.get(1)[1] = sol.findMedianSortedArrays(new int[]{1,2}, new int[]{3,4});\n    testResults.get(2)[1] = sol.findMedianSortedArrays(new int[]{1,3,8}, new int[]{2,7});\n\n    for (double[] result : testResults) {\n      System.out.println(\"Expected: \" + result[0] + \", Actual: \" + result[1]);\n      System.out.flush();\n    }\n  }\n}"
        }
    },
    {
        "title": "Valid Palindrome II",
        "testcases": {
            "javascript": "const testResults=[{expectedOutput: true, actualOutput: false},{expectedOutput: true, actualOutput: false},{expectedOutput: true, actualOutput: false}];\n\n  testResults[0].actualOutput = validPalindrome('aba');\n  testResults[1].actualOutput = validPalindrome('abca');\n  testResults[2].actualOutput = validPalindrome('abcda');\n\n  console.log(testResults);",
            "python": "test_results = [\n  {\"expected_output\": true, \"actual_output\": false},\n  {\"expected_output\": true, \"actual_output\": false},\n  {\"expected_output\": true, \"actual_output\": false},\n]\n\ntest_results[0][\"actual_output\"] = valid_palindrome('aba')\ntest_results[1][\"actual_output\"] = valid_palindrome('abca')\ntest_results[2][\"actual_output\"] = valid_palindrome('abcda')\n\nprint(test_results)",
            "cpp": "int main() {\n  Solution sol;\n  std::pair<bool, bool> testResults[3] = {\n    {true, false},\n    {true, false},\n    {true, false}\n  };\n\n  testResults[0].second = sol.validPalindrome(\"aba\");\n  testResults[1].second = sol.validPalindrome(\"abca\");\n  testResults[2].second = sol.validPalindrome(\"abcda\");\n\n  for (const auto& result : testResults) {\n    std::cout << \"Expected: \" << result.first << \", Actual: \" << result.second << std::endl;\n  }\n\n  return 0;\n}",
            "java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class TestResults extends Solution {\n  public static void main(String[] args) {\n    Solution sol = new Solution();\n    List<boolean[]> testResults = new ArrayList<>();\n    testResults.add(new boolean[]{true, false});\n    testResults.add(new boolean[]{true, false});\n    testResults.add(new boolean[]{true, false});\n\n    testResults.get(0)[1] = sol.validPalindrome(\"aba\");\n    testResults.get(1)[1] = sol.validPalindrome(\"abca\");\n    testResults.get(2)[1] = sol.validPalindrome(\"abcda\");\n\n    for (boolean[] result : testResults) {\n      System.out.println(\"Expected: \" + result[0] + \", Actual: \" + result[1]);\n      System.out.flush();\n    }\n  }\n}"
        }
    },
    {
        "title": "Longest Substring Without Repeating Characters",
        "testcases": {
            "javascript": "const testResults=[{expectedOutput: 3, actualOutput: 0},{expectedOutput: 1, actualOutput: 0},{expectedOutput: 5, actualOutput: 0}];\n\n  testResults[0].actualOutput = lengthOfLongestSubstring('abcabcbb');\n  testResults[1].actualOutput = lengthOfLongestSubstring('bbbbb');\n  testResults[2].actualOutput = lengthOfLongestSubstring('pwwkew');\n\n  console.log(testResults);",
            "python": "test_results = [\n  {\"expected_output\": 3, \"actual_output\": 0},\n  {\"expected_output\": 1, \"actual_output\": 0},\n  {\"expected_output\": 5, \"actual_output\": 0},\n]\n\ntest_results[0][\"actual_output\"] = length_of_longest_substring('abcabcbb')\ntest_results[1][\"actual_output\"] = length_of_longest_substring('bbbbb')\ntest_results[2][\"actual_output\"] = length_of_longest_substring('pwwkew')\n\nprint(test_results)",
            "cpp": "int main() {\n  Solution sol;\n  std::pair<int, int> testResults[3] = {\n    {3, 0},\n    {1, 0},\n    {5, 0}\n  };\n\n  testResults[0].second = sol.lengthOfLongestSubstring(\"abcabcbb\");\n  testResults[1].second = sol.lengthOfLongestSubstring(\"bbbbb\");\n  testResults[2].second = sol.lengthOfLongestSubstring(\"pwwkew\");\n\n  for (const auto& result : testResults) {\n    std::cout << \"Expected: \" << result.first << \", Actual: \" << result.second << std::endl;\n  }\n\n  return 0;\n}",
            "java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class TestResults extends Solution {\n  public static void main(String[] args) {\n    Solution sol = new Solution();\n    List<int[]> testResults = new ArrayList<>();\n    testResults.add(new int[]{3, 0});\n    testResults.add(new int[]{1, 0});\n    testResults.add(new int[]{5, 0});\n\n    testResults.get(0)[1] = sol.lengthOfLongestSubstring(\"abcabcbb\");\n    testResults.get(1)[1] = sol.lengthOfLongestSubstring(\"bbbbb\");\n    testResults.get(2)[1] = sol.lengthOfLongestSubstring(\"pwwkew\");\n\n    for (int[] result : testResults) {\n      System.out.println(\"Expected: \" + result[0] + \", Actual: \" + result[1]);\n      System.out.flush();\n    }\n  }\n}"
        }
    },
    {
        "title": "Search in Rotated Sorted Array",
        "testcases": {
            "javascript": "const testResults=[{expectedOutput:1,actualOutput:-1},{expectedOutput:0,actualOutput:-1},{expectedOutput:4,actualOutput:-1}];\n\ntestResults[0].actualOutput = searchInRotatedSortedArrayTest();\ntestResults[1].actualOutput = searchInRotatedSortedArrayTest();\ntestResults[2].actualOutput = searchInRotatedSortedArrayTest();\n\nconsole.log(testResults);",
            "python": "test_results = [\n  {\"expected_output\": 1, \"actual_output\": -1},\n  {\"expected_output\": 0, \"actual_output\": -1},\n  {\"expected_output\": 4, \"actual_output\": -1},\n]\n\ntest_results[0][\"actual_output\"] = search_in_rotated_sorted_array_test()\ntest_results[1][\"actual_output\"] = search_in_rotated_sorted_array_test()\ntest_results[2][\"actual_output\"] = search_in_rotated_sorted_array_test()\n\nprint(test_results)",
            "cpp": "int main() {\n  Solution sol;\n  std::pair<int, int> testResults[3] = {\n    {1, -1},\n    {0, -1},\n    {4, -1}\n  };\n\n  testResults[0].second = sol.searchInRotatedSortedArrayTest();\n  testResults[1].second = sol.searchInRotatedSortedArrayTest();\n  testResults[2].second = sol.searchInRotatedSortedArrayTest();\n\n  for (const auto& result : testResults) {\n    std::cout << \"Expected: \" << result.first << \", Actual: \" << result.second << std::endl;\n  }\n\n  return 0;\n}",
            "java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class TestResults extends Solution {\n  public static void main(String[] args) {\n    Solution sol = new Solution();\n    List<int[]> testResults = new ArrayList<>();\n    testResults.add(new int[]{1, -1});\n    testResults.add(new int[]{0, -1});\n    testResults.add(new int[]{4, -1});\n\n    testResults.get(0)[1] = sol.searchInRotatedSortedArrayTest();\n    testResults.get(1)[1] = sol.searchInRotatedSortedArrayTest();\n    testResults.get(2)[1] = sol.searchInRotatedSortedArrayTest();\n\n    for (int[] result : testResults) {\n      System.out.println(\"Expected: \" + result[0] + \", Actual: \" + result[1]);\n      System.out.flush();\n    }\n  }\n}"
        }
    },
    {
        "title": "Group Anagrams",
        "testcases": {
            "javascript": "const testResults=[{expectedOutput:'[\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]',actualOutput:''},{expectedOutput:'',actualOutput:''},{expectedOutput:'',actualOutput:''}];\n\ntestResults[0].actualOutput = groupAnagramsTest();\ntestResults[1].actualOutput = groupAnagramsTest();\ntestResults[2].actualOutput = groupAnagramsTest();\n\nconsole.log(testResults);",
            "python": "test_results = [\n  {\"expected_output\": '[\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]', \"actual_output\": ''},\n  {\"expected_output\": '', \"actual_output\": ''},\n  {\"expected_output\": '', \"actual_output\": ''},\n]\n\ntest_results[0][\"actual_output\"] = group_anagrams_test()\ntest_results[1][\"actual_output\"] = group_anagrams_test()\ntest_results[2][\"actual_output\"] = group_anagrams_test()\n\nprint(test_results)",
            "cpp": "int main() {\n  Solution sol;\n  std::pair<std::string, std::string> testResults[3] = {\n    {'[\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]', ''},\n    {'', ''},\n    {'', ''}\n  };\n\n  testResults[0].second = sol.groupAnagramsTest();\n  testResults[1].second = sol.groupAnagramsTest();\n  testResults[2].second = sol.groupAnagramsTest();\n\n  for (const auto& result : testResults) {\n    std::cout << \"Expected: \" << result.first << \", Actual: \" << result.second << std::endl;\n  }\n\n  return 0;\n}",
            "java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class TestResults extends Solution {\n  public static void main(String[] args) {\n    Solution sol = new Solution();\n    List<String[]> testResults = new ArrayList<>();\n    testResults.add(new String[]{'[\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]', ''});\n    testResults.add(new String[]{''});\n    testResults.add(new String[]{''});\n\n    testResults.get(0)[1] = sol.groupAnagramsTest();\n    testResults.get(1)[1] = sol.groupAnagramsTest();\n    testResults.get(2)[1] = sol.groupAnagramsTest();\n\n    for (String[] result : testResults) {\n      System.out.println(\"Expected: \" + result[0] + \", Actual: \" + result[1]);\n      System.out.flush();\n    }\n  }\n}"
        }
    },
    {
        "title": "ZigZag Conversion",
        "testcases": {
            "javascript": "const testResults=[{expectedOutput:'PAHNAPLSIIGYIR',actualOutput:''},{expectedOutput:'',actualOutput:''},{expectedOutput:'',actualOutput:''}];\n\ntestResults[0].actualOutput = zigZagConversionTest();\ntestResults[1].actualOutput = zigZagConversionTest();\ntestResults[2].actualOutput = zigZagConversionTest();\n\nconsole.log(testResults);",
            "python": "test_results = [\n  {\"expected_output\": 'PAHNAPLSIIGYIR', \"actual_output\": ''},\n  {\"expected_output\": '', \"actual_output\": ''},\n  {\"expected_output\": '', \"actual_output\": ''},\n]\n\ntest_results[0][\"actual_output\"] = zigzag_conversion_test()\ntest_results[1][\"actual_output\"] = zigzag_conversion_test()\ntest_results[2][\"actual_output\"] = zigzag_conversion_test()\n\nprint(test_results)",
            "cpp": "int main() {\n  Solution sol;\n  std::pair<std::string, std::string> testResults[3] = {\n    {'PAHNAPLSIIGYIR', ''},\n    {'', ''},\n    {'', ''}\n  };\n\n  testResults[0].second = sol.zigZagConversionTest();\n  testResults[1].second = sol.zigZagConversionTest();\n  testResults[2].second = sol.zigZagConversionTest();\n\n  for (const auto& result : testResults) {\n    std::cout << \"Expected: \" << result.first << \", Actual: \" << result.second << std::endl;\n  }\n\n  return 0;\n}",
            "java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class TestResults extends Solution {\n  public static void main(String[] args) {\n    Solution sol = new Solution();\n    List<String[]> testResults = new ArrayList<>();\n    testResults.add(new String[]{'PAHNAPLSIIGYIR', ''});\n    testResults.add(new String[]{''});\n    testResults.add(new String[]{''});\n\n    testResults.get(0)[1] = sol.zigZagConversionTest();\n    testResults.get(1)[1] = sol.zigZagConversionTest();\n    testResults.get(2)[1] = sol.zigZagConversionTest();\n\n    for (String[] result : testResults) {\n      System.out.println(\"Expected: \" + result[0] + \", Actual: \" + result[1]);\n      System.out.flush();\n    }\n  }\n}"
        }
    },
    {
        "title": "Merge K Sorted Lists",
        "testcases": {
            "javascript": "const testResults=[{expectedOutput:'1->1->2->3->4->4->5->6',actualOutput:''},{expectedOutput:'',actualOutput:''},{expectedOutput:'',actualOutput:''}];\n\ntestResults[0].actualOutput = mergeKSortedListsTest();\ntestResults[1].actualOutput = mergeKSortedListsTest();\ntestResults[2].actualOutput = mergeKSortedListsTest();\n\nconsole.log(testResults);",
            "python": "test_results = [\n  {\"expected_output\": '1->1->2->3->4->4->5->6', \"actual_output\": ''},\n  {\"expected_output\": '', \"actual_output\": ''},\n  {\"expected_output\": '', \"actual_output\": ''},\n]\n\ntest_results[0][\"actual_output\"] = merge_k_sorted_lists_test()\ntest_results[1][\"actual_output\"] = merge_k_sorted_lists_test()\ntest_results[2][\"actual_output\"] = merge_k_sorted_lists_test()\n\nprint(test_results)",
            "cpp": "int main() {\n  Solution sol;\n  std::pair<std::string, std::string> testResults[3] = {\n    {'1->1->2->3->4->4->5->6', ''},\n    {'', ''},\n    {'', ''}\n  };\n\n  testResults[0].second = sol.mergeKSortedListsTest();\n  testResults[1].second = sol.mergeKSortedListsTest();\n  testResults[2].second = sol.mergeKSortedListsTest();\n\n  for (const auto& result : testResults) {\n    std::cout << \"Expected: \" << result.first << \", Actual: \" << result.second << std::endl;\n  }\n\n  return 0;\n}",
            "java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class TestResults extends Solution {\n  public static void main(String[] args) {\n    Solution sol = new Solution();\n    List<String[]> testResults = new ArrayList<>();\n    testResults.add(new String[]{'1->1->2->3->4->4->5->6', ''});\n    testResults.add(new String[]{''});\n    testResults.add(new String[]{''});\n\n    testResults.get(0)[1] = sol.mergeKSortedListsTest();\n    testResults.get(1)[1] = sol.mergeKSortedListsTest();\n    testResults.get(2)[1] = sol.mergeKSortedListsTest();\n\n    for (String[] result : testResults) {\n      System.out.println(\"Expected: \" + result[0] + \", Actual: \" + result[1]);\n      System.out.flush();\n    }\n  }\n}"
        }
    },
    {
        "title": "Implement Trie (Prefix Tree)",
        "testcases": {
            "javascript": "const testResults=[{expectedOutput:true,actualOutput:false},{expectedOutput:true,actualOutput:false},{expectedOutput:false,actualOutput:true}];\n\ntestResults[0].actualOutput = implementTrieTest();\ntestResults[1].actualOutput = implementTrieTest();\ntestResults[2].actualOutput = implementTrieTest();\n\nconsole.log(testResults);",
            "python": "test_results = [\n  {\"expected_output\": true, \"actual_output\": false},\n  {\"expected_output\": true, \"actual_output\": false},\n  {\"expected_output\": false, \"actual_output\": true},\n]\n\ntest_results[0][\"actual_output\"] = implement_trie_test()\ntest_results[1][\"actual_output\"] = implement_trie_test()\ntest_results[2][\"actual_output\"] = implement_trie_test()\n\nprint(test_results)",
            "cpp": "int main() {\n  Solution sol;\n  std::pair<bool, bool> testResults[3] = {\n    {true, false},\n    {true, false},\n    {false, true}\n  };\n\n  testResults[0].second = sol.implementTrieTest();\n  testResults[1].second = sol.implementTrieTest();\n  testResults[2].second = sol.implementTrieTest();\n\n  for (const auto& result : testResults) {\n    std::cout << \"Expected: \" << result.first << \", Actual: \" << result.second << std::endl;\n  }\n\n  return 0;\n}",
            "java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class TestResults extends Solution {\n  public static void main(String[] args) {\n    Solution sol = new Solution();\n    List<Boolean[]> testResults = new ArrayList<>();\n    testResults.add(new Boolean[]{true, false});\n    testResults.add(new Boolean[]{true, false});\n    testResults.add(new Boolean[]{false, true});\n\n    testResults.get(0)[1] = sol.implementTrieTest();\n    testResults.get(1)[1] = sol.implementTrieTest();\n    testResults.get(2)[1] = sol.implementTrieTest();\n\n    for (Boolean[] result : testResults) {\n      System.out.println(\"Expected: \" + result[0] + \", Actual: \" + result[1]);\n      System.out.flush();\n    }\n  }\n}"
        }
    },
    {
        "title": "Reverse Integer",
        "testcases": {
            "javascript": "const testResults=[{expectedOutput:321,actualOutput:0},{expectedOutput:-321,actualOutput:0},{expectedOutput:0,actualOutput:0}];\n\ntestResults[0].actualOutput = reverseInteger(123);\ntestResults[1].actualOutput = reverseInteger(-123);\ntestResults[2].actualOutput = reverseInteger(0);\n\nconsole.log(testResults);",
            "python": "test_results = [\n  {\"expected_output\": 321, \"actual_output\": 0},\n  {\"expected_output\": -321, \"actual_output\": 0},\n  {\"expected_output\": 0, \"actual_output\": 0},\n]\n\ntest_results[0][\"actual_output\"] = reverse_integer(123)\ntest_results[1][\"actual_output\"] = reverse_integer(-123)\ntest_results[2][\"actual_output\"] = reverse_integer(0)\n\nprint(test_results)",
            "cpp": "int main() {\n  Solution sol;\n  std::pair<int, int> testResults[3] = {\n    {321, 0},\n    {-321, 0},\n    {0, 0}\n  };\n\n  testResults[0].second = sol.reverseInteger(123);\n  testResults[1].second = sol.reverseInteger(-123);\n  testResults[2].second = sol.reverseInteger(0);\n\n  for (const auto& result : testResults) {\n    std::cout << \"Expected: \" << result.first << \", Actual: \" << result.second << std::endl;\n  }\n\n  return 0;\n}",
            "java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class TestResults extends Solution {\n  public static void main(String[] args) {\n    Solution sol = new Solution();\n    List<int[]> testResults = new ArrayList<>();\n    testResults.add(new int[]{321, 0});\n    testResults.add(new int[]{-321, 0});\n    testResults.add(new int[]{0, 0});\n\n    testResults.get(0)[1] = sol.reverseInteger(123);\n    testResults.get(1)[1] = sol.reverseInteger(-123);\n    testResults.get(2)[1] = sol.reverseInteger(0);\n\n    for (int[] result : testResults) {\n      System.out.println(\"Expected: \" + result[0] + \", Actual: \" + result[1]);\n      System.out.flush();\n    }\n  }\n}"
        }
    },
    {
        "title": "Longest Common Prefix",
        "testcases": {
            "javascript": "const testResults=[{expectedOutput:'abc',actualOutput:''},{expectedOutput:'flower',actualOutput:''},{expectedOutput:'dog',actualOutput:''}];\n\ntestResults[0].actualOutput = longestCommonPrefix(['abc', 'abcd', 'abcde']);\ntestResults[1].actualOutput = longestCommonPrefix(['flower', 'flow', 'flight']);\ntestResults[2].actualOutput = longestCommonPrefix(['dog', 'racecar', 'car']);\n\nconsole.log(testResults);",
            "python": "test_results = [\n  {\"expected_output\": \"abc\", \"actual_output\": \"\"},\n  {\"expected_output\": \"flower\", \"actual_output\": \"\"},\n  {\"expected_output\": \"dog\", \"actual_output\": \"\"},\n]\n\ntest_results[0][\"actual_output\"] = longest_common_prefix(['abc', 'abcd', 'abcde'])\ntest_results[1][\"actual_output\"] = longest_common_prefix(['flower', 'flow', 'flight'])\ntest_results[2][\"actual_output\"] = longest_common_prefix(['dog', 'racecar', 'car'])\n\nprint(test_results)",
            "cpp": "int main() {\n  Solution sol;\n  std::pair<std::string, std::string> testResults[3] = {\n    {'abc', ''},\n    {'flower', ''},\n    {'dog', ''}\n  };\n\n  testResults[0].second = sol.longestCommonPrefix({'abc', 'abcd', 'abcde'});\n  testResults[1].second = sol.longestCommonPrefix({'flower', 'flow', 'flight'});\n  testResults[2].second = sol.longestCommonPrefix({'dog', 'racecar', 'car'});\n\n  for (const auto& result : testResults) {\n    std::cout << \"Expected: \" << result.first << \", Actual: \" << result.second << std::endl;\n  }\n\n  return 0;\n}",
            "java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class TestResults extends Solution {\n  public static void main(String[] args) {\n    Solution sol = new Solution();\n    List<String[]> testResults = new ArrayList<>();\n    testResults.add(new String[]{\"abc\", \"\"});\n    testResults.add(new String[]{\"flower\", \"\"});\n    testResults.add(new String[]{\"dog\", \"\"});\n\n    testResults.get(0)[1] = sol.longestCommonPrefix(new String[]{\"abc\", 'abcd', 'abcde'});\n    testResults.get(1)[1] = sol.longestCommonPrefix(new String[]{\"flower\", 'flow', 'flight'});\n    testResults.get(2)[1] = sol.longestCommonPrefix(new String[]{\"dog\", 'racecar', 'car'});\n\n    for (String[] result : testResults) {\n      System.out.println(\"Expected: \" + result[0] + \", Actual: \" + result[1]);\n      System.out.flush();\n    }\n  }\n}"
        }
    },
    {
        "title": "Longest Substring Without Repeating Characters",
        "testcases": {
            "javascript": "const testResults=[{expectedOutput: 3, actualOutput: 0},{expectedOutput: 1, actualOutput: 0},{expectedOutput: 5, actualOutput: 0}];\n\n  testResults[0].actualOutput = lengthOfLongestSubstring('abcabcbb');\n  testResults[1].actualOutput = lengthOfLongestSubstring('bbbbb');\n  testResults[2].actualOutput = lengthOfLongestSubstring('pwwkew');\n\n  console.log(testResults);",
            "python": "test_results = [\n  {\"expected_output\": 3, \"actual_output\": 0},\n  {\"expected_output\": 1, \"actual_output\": 0},\n  {\"expected_output\": 5, \"actual_output\": 0},\n]\n\ntest_results[0][\"actual_output\"] = length_of_longest_substring('abcabcbb')\ntest_results[1][\"actual_output\"] = length_of_longest_substring('bbbbb')\ntest_results[2][\"actual_output\"] = length_of_longest_substring('pwwkew')\n\nprint(test_results)",
            "cpp": "int main() {\n  Solution sol;\n  std::pair<int, int> testResults[3] = {\n    {3, 0},\n    {1, 0},\n    {5, 0}\n  };\n\n  testResults[0].second = sol.lengthOfLongestSubstring(\"abcabcbb\");\n  testResults[1].second = sol.lengthOfLongestSubstring(\"bbbbb\");\n  testResults[2].second = sol.lengthOfLongestSubstring(\"pwwkew\");\n\n  for (const auto& result : testResults) {\n    std::cout << \"Expected: \" << result.first << \", Actual: \" << result.second << std::endl;\n  }\n\n  return 0;\n}",
            "java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class TestResults extends Solution {\n  public static void main(String[] args) {\n    Solution sol = new Solution();\n    List<int[]> testResults = new ArrayList<>();\n    testResults.add(new int[]{3, 0});\n    testResults.add(new int[]{1, 0});\n    testResults.add(new int[]{5, 0});\n\n    testResults.get(0)[1] = sol.lengthOfLongestSubstring(\"abcabcbb\");\n    testResults.get(1)[1] = sol.lengthOfLongestSubstring(\"bbbbb\");\n    testResults.get(2)[1] = sol.lengthOfLongestSubstring(\"pwwkew\");\n\n    for (int[] result : testResults) {\n      System.out.println(\"Expected: \" + result[0] + \", Actual: \" + result[1]);\n      System.out.flush();\n    }\n  }\n}"
        }
    }
]